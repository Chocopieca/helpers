@import "../values";

@mixin generate($sizes, $breakpoints, $class) {
  @if(nth($class, 3) == null) {
    @include firstCase(
                    nth($class, 1),
                    nth($class, 2),
                    $sizes
    );
  } @else {
    @include secondCase(
                    nth($class, 1),
                    nth($class, 2),
                    nth($class, 3),
                    $sizes
    );
  }

  @each $breakpoint in $breakpoints {
    @if(nth($class, 3) == null) {
      @include firstCase(
                      nth($class, 1),
                      nth($class, 2),
                      $sizes,
                      nth($breakpoint, 1),
                      nth($breakpoint, 2)
      );
    } @else {
      @include secondCase(
                      nth($class, 1),
                      nth($class, 2),
                      nth($class, 3),
                      $sizes,
                      nth($breakpoint, 1),
                      nth($breakpoint, 2)
      );
    }
  }
}

@mixin firstCase(
  $prefix,
  $property,
  $sizes,
  $breakpoints: null,
  $BPTitle: null
) {
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    @if($breakpoints) {
      @media ('min-width': #{$breakpoints}) {
        .#{$prefix}-#{$BPTitle}-#{$i} {
          #{$property}: #{$size}px !important;
        }
      }
    } @else {
      $size: nth($sizes, $i);
      .#{$prefix}-#{$i} {
        #{$property}: #{$size}px !important;
      }
    }
  }
}


@mixin secondCase(
  $prefix,
  $property-1,
  $property-2,
  $sizes,
  $breakpoints: null,
  $BPTitle: null
) {
  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    @if($breakpoints) {
      @media ('min-width': #{$breakpoints}) {
        .#{$prefix}-#{$BPTitle}-#{$i} {
          #{$property-1}: #{$size}px !important;
          #{$property-2}: #{$size}px !important;
        }
      }
    } @else {
      .#{$prefix}-#{$i} {
        #{$property-1}: #{$size}px !important;
        #{$property-2}: #{$size}px !important;
      }
    }
  }
}

@each $class in $margin-padding-classes {
  @include generate($sizes, $breakpoints, $class);
}
//@for $i from 1 through length($margin-padding-classes) {
//  $class: nth($margin-padding-classes, $i);
//  @include generate($sizes, $breakpoints, $class);
//}
